#!/usr/bin/env tsx
/**
 * Test scenario data for edge cases and specific testing needs
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'
import { resolve } from 'path'

dotenv.config({ path: resolve(process.cwd(), '.env.local') })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing environment variables')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function seedTestScenarios() {
  console.log('üß™ Creating test scenarios for edge cases...\n')

  try {
    // Scenario 1: Worker with perfect attendance
    console.log('üìç Scenario 1: Perfect attendance worker')
    const { data: perfectWorker } = await supabase
      .from('profiles')
      .upsert({
        email: 'perfect.worker@test.com',
        full_name: 'ÍπÄÏôÑÎ≤Ω',
        role: 'worker',
        phone: '010-1111-1111',
        is_verified: true
      }, { onConflict: 'email' })
      .select()
      .single()

    if (perfectWorker) {
      const { data: site } = await supabase
        .from('sites')
        .select('id')
        .eq('status', 'active')
        .limit(1)
        .single()

      if (site) {
        const attendance = []
        for (let i = 0; i < 30; i++) {
          const date = new Date()
          date.setDate(date.getDate() - i)
          if (date.getDay() !== 0 && date.getDay() !== 6) {
            attendance.push({
              profile_id: perfectWorker.id,
              site_id: site.id,
              work_date: date.toISOString().split('T')[0],
              check_in_time: '08:00:00',
              check_out_time: '17:00:00',
              status: 'present',
              labor_hours: 1.0,
              notes: 'Ï†ïÏÉÅ Í∑ºÎ¨¥'
            })
          }
        }
        await supabase.from('attendance_records').upsert(attendance, { onConflict: 'profile_id,work_date' })
      }
    }
    console.log('‚úÖ Perfect attendance worker created\n')

    // Scenario 2: Worker with irregular hours
    console.log('üìç Scenario 2: Irregular hours worker')
    const { data: irregularWorker } = await supabase
      .from('profiles')
      .upsert({
        email: 'irregular.worker@test.com',
        full_name: 'Î∞ïÎ∂àÍ∑úÏπô',
        role: 'worker',
        phone: '010-2222-2222',
        is_verified: true
      }, { onConflict: 'email' })
      .select()
      .single()

    if (irregularWorker) {
      const { data: sites } = await supabase
        .from('sites')
        .select('id')
        .eq('status', 'active')
        .limit(3)

      if (sites && sites.length > 0) {
        const attendance = []
        const laborHoursPattern = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 0, 0.5, 1.0, 1.5]
        
        for (let i = 0; i < 30; i++) {
          const date = new Date()
          date.setDate(date.getDate() - i)
          const laborHours = laborHoursPattern[i % laborHoursPattern.length]
          
          if (laborHours > 0) {
            attendance.push({
              profile_id: irregularWorker.id,
              site_id: sites[i % sites.length].id,
              work_date: date.toISOString().split('T')[0],
              check_in_time: '08:00:00',
              check_out_time: `${8 + laborHours * 8}:00:00`,
              status: laborHours >= 1 ? 'present' : 'half_day',
              labor_hours: laborHours,
              notes: laborHours > 1 ? 'ÏïºÍ∑º' : laborHours < 1 ? 'Ï°∞Ìá¥' : 'Ï†ïÏÉÅ'
            })
          }
        }
        await supabase.from('attendance_records').upsert(attendance, { onConflict: 'profile_id,work_date' })
      }
    }
    console.log('‚úÖ Irregular hours worker created\n')

    // Scenario 3: Site with weather issues
    console.log('üìç Scenario 3: Site with weather delays')
    const { data: weatherSite } = await supabase
      .from('sites')
      .upsert({
        name: 'Ïö∞Ï≤úÏßÄÏó∞ ÌòÑÏû•',
        code: 'RAIN-TEST-001',
        address: 'ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨ Ïö∞Ï≤úÎ°ú 123',
        description: 'Ïö∞Ï≤úÏúºÎ°ú ÏûêÏ£º ÏßÄÏó∞ÎêòÎäî ÌòÑÏû•',
        status: 'active',
        start_date: '2024-01-01',
        end_date: '2025-12-31',
        work_process: 'Ïô∏Î∂Ä ÎßàÍ∞êÍ≥µÏÇ¨',
        manager_name: 'ÍπÄÏö∞Ï≤ú'
      }, { onConflict: 'code' })
      .select()
      .single()

    if (weatherSite) {
      const { data: manager } = await supabase
        .from('profiles')
        .select('id')
        .eq('role', 'site_manager')
        .limit(1)
        .single()

      if (manager) {
        const reports = []
        for (let i = 0; i < 20; i++) {
          const date = new Date()
          date.setDate(date.getDate() - i)
          const isRainy = i % 3 === 0
          
          reports.push({
            site_id: weatherSite.id,
            work_date: date.toISOString().split('T')[0],
            created_by: manager.id,
            weather: isRainy ? 'ÎπÑ' : 'ÎßëÏùå',
            temperature: 20,
            humidity: isRainy ? 85 : 60,
            worker_count: isRainy ? 5 : 25,
            work_content: isRainy ? 'Ïö∞Ï≤úÏúºÎ°ú Ïã§ÎÇ¥ ÏûëÏóÖÎßå ÏßÑÌñâ' : 'Ï†ïÏÉÅ ÏûëÏóÖ ÏßÑÌñâ',
            safety_matters: isRainy ? 'ÎØ∏ÎÅÑÎüº Ï£ºÏùò, Ïö∞ÎπÑ Ï∞©Ïö© ÌïÑÏàò' : 'ÏïàÏ†ÑÎ™® Ï∞©Ïö©',
            issues: isRainy ? 'Ïö∞Ï≤úÏúºÎ°ú Ïô∏Î∂Ä ÏûëÏóÖ Ï§ëÎã®' : null,
            tomorrow_plan: 'ÎÇ†Ïî®Ïóê Îî∞Îùº ÏûëÏóÖ Ï°∞Ï†ï',
            status: 'approved'
          })
        }
        await supabase.from('daily_reports').upsert(reports, { onConflict: 'site_id,work_date' })
      }
    }
    console.log('‚úÖ Weather-affected site created\n')

    // Scenario 4: Multiple role user (for permission testing)
    console.log('üìç Scenario 4: Multi-role test users')
    const roles = ['worker', 'site_manager', 'customer_manager', 'admin', 'system_admin']
    
    for (const role of roles) {
      await supabase
        .from('profiles')
        .upsert({
          email: `test.${role}@test.com`,
          full_name: `ÌÖåÏä§Ìä∏ ${role}`,
          role: role,
          phone: `010-${role === 'worker' ? '1111' : role === 'site_manager' ? '2222' : '3333'}-0000`,
          is_verified: true
        }, { onConflict: 'email' })
    }
    console.log('‚úÖ Multi-role test users created\n')

    // Scenario 5: Site with critical materials shortage
    console.log('üìç Scenario 5: Material shortage scenario')
    const { data: shortageSite } = await supabase
      .from('sites')
      .select('id')
      .eq('status', 'active')
      .limit(1)
      .single()

    if (shortageSite) {
      // Create critical materials with low inventory
      const criticalMaterials = [
        { name: 'Ï≤†Í∑º SD400 D25 (Î∂ÄÏ°±)', code: 'CRIT-001', category: 'Ï≤†Í∑º', unit: 'TON', min_stock: 100 },
        { name: 'Î†àÎØ∏ÏΩò 30-27-150 (Í∏¥Í∏â)', code: 'CRIT-002', category: 'Î†àÎØ∏ÏΩò', unit: 'M3', min_stock: 50 },
        { name: 'ÏãúÎ©òÌä∏ ÌäπÏàò (ÌíàÏ†à)', code: 'CRIT-003', category: 'ÏãúÎ©òÌä∏', unit: 'BAG', min_stock: 200 }
      ]

      const { data: materials } = await supabase
        .from('materials')
        .upsert(criticalMaterials, { onConflict: 'code' })
        .select()

      if (materials) {
        const inventory = materials.map(mat => ({
          site_id: shortageSite.id,
          material_id: mat.id,
          quantity: 5, // Very low quantity
          reserved_quantity: 3,
          location: 'Í∏¥Í∏â Ï∞ΩÍ≥†',
          last_updated: new Date().toISOString()
        }))

        await supabase
          .from('material_inventory')
          .upsert(inventory, { onConflict: 'site_id,material_id' })
      }

      // Create urgent notifications
      const { data: managers } = await supabase
        .from('profiles')
        .select('id')
        .in('role', ['site_manager', 'admin'])
        .limit(5)

      if (managers) {
        const notifications = managers.map(m => ({
          profile_id: m.id,
          title: 'üö® Í∏¥Í∏â: ÏûêÏû¨ Î∂ÄÏ°±',
          message: 'Ï≤†Í∑º Ïû¨Í≥†Í∞Ä ÏµúÏÜå ÏàòÎüâ Ïù¥ÌïòÏûÖÎãàÎã§. Ï¶âÏãú Î∞úÏ£ºÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.',
          type: 'error',
          is_read: false
        }))

        await supabase.from('notifications').insert(notifications)
      }
    }
    console.log('‚úÖ Material shortage scenario created\n')

    // Scenario 6: Completed project with full history
    console.log('üìç Scenario 6: Completed project with history')
    const { data: completedSite } = await supabase
      .from('sites')
      .upsert({
        name: 'ÏôÑÎ£åÎêú ÌîÑÎ°úÏ†ùÌä∏',
        code: 'COMPLETED-001',
        address: 'ÏÑúÏö∏Ïãú ÏÑúÏ¥àÍµ¨ ÏôÑÎ£åÎ°ú 999',
        description: 'ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêú ÌîÑÎ°úÏ†ùÌä∏',
        status: 'completed',
        start_date: '2023-01-01',
        end_date: '2024-06-30',
        work_process: 'Ï§ÄÍ≥µ ÏôÑÎ£å',
        manager_name: 'ÍπÄÏÑ±Í≥µ'
      }, { onConflict: 'code' })
      .select()
      .single()

    if (completedSite) {
      // Create completion documents
      const { data: uploader } = await supabase
        .from('profiles')
        .select('id')
        .eq('role', 'admin')
        .limit(1)
        .single()

      if (uploader) {
        const completionDocs = [
          { title: 'Ï§ÄÍ≥µ Í≤ÄÏÇ¨ ÌôïÏù∏ÏÑú', type: 'Ï§ÄÍ≥µÏÑúÎ•ò', status: 'approved' },
          { title: 'ÏµúÏ¢Ö ÌíàÏßà ÏãúÌóò ÏÑ±Ï†ÅÏÑú', type: 'ÌíàÏßàÏÑúÎ•ò', status: 'approved' },
          { title: 'Ï§ÄÍ≥µ ÎèÑÎ©¥', type: 'ÎèÑÎ©¥', status: 'approved' },
          { title: 'ÌïòÏûê Î≥¥Ïàò Í≥ÑÌöçÏÑú', type: 'Ïú†ÏßÄÎ≥¥Ïàò', status: 'approved' }
        ]

        const documents = completionDocs.map(doc => ({
          ...doc,
          file_url: `https://example.com/completed/${doc.type}.pdf`,
          file_size: 5000000,
          uploaded_by: uploader.id,
          site_id: completedSite.id,
          description: `${completedSite.name} ${doc.title}`,
          version: 'FINAL'
        }))

        await supabase.from('documents').upsert(documents, { onConflict: 'title,site_id' })
      }
    }
    console.log('‚úÖ Completed project created\n')

    // Scenario 7: High overtime site (for payroll testing)
    console.log('üìç Scenario 7: High overtime site')
    const { data: overtimeWorker } = await supabase
      .from('profiles')
      .upsert({
        email: 'overtime.king@test.com',
        full_name: 'ÏµúÏïºÍ∑º',
        role: 'worker',
        phone: '010-9999-9999',
        is_verified: true
      }, { onConflict: 'email' })
      .select()
      .single()

    if (overtimeWorker) {
      const { data: site } = await supabase
        .from('sites')
        .select('id')
        .eq('status', 'active')
        .limit(1)
        .single()

      if (site) {
        const attendance = []
        for (let i = 0; i < 30; i++) {
          const date = new Date()
          date.setDate(date.getDate() - i)
          if (date.getDay() !== 0) { // Work even on Saturdays
            attendance.push({
              profile_id: overtimeWorker.id,
              site_id: site.id,
              work_date: date.toISOString().split('T')[0],
              check_in_time: '07:00:00',
              check_out_time: '22:00:00',
              status: 'present',
              labor_hours: 1.875, // 15 hours = 1.875 Í≥µÏàò
              notes: 'Í∏¥Í∏â Í≥µÏÇ¨ ÏïºÍ∑º'
            })
          }
        }
        await supabase.from('attendance_records').upsert(attendance, { onConflict: 'profile_id,work_date' })
      }
    }
    console.log('‚úÖ High overtime worker created\n')

    console.log('üéØ All test scenarios created successfully!')
    console.log('\nüìã Test Scenarios Available:')
    console.log('   1. Perfect attendance: perfect.worker@test.com')
    console.log('   2. Irregular hours: irregular.worker@test.com')
    console.log('   3. Weather-affected site: Ïö∞Ï≤úÏßÄÏó∞ ÌòÑÏû•')
    console.log('   4. Role testing: test.{role}@test.com')
    console.log('   5. Material shortage alerts')
    console.log('   6. Completed project: ÏôÑÎ£åÎêú ÌîÑÎ°úÏ†ùÌä∏')
    console.log('   7. High overtime: overtime.king@test.com')
    console.log('\n‚ú® Use these scenarios to test edge cases and specific features!')

  } catch (error) {
    console.error('‚ùå Error creating test scenarios:', error)
    process.exit(1)
  }
}

// Run the function
seedTestScenarios()