name: CI/CD Pipeline - Testing & Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  NODE_OPTIONS: '--max-old-space-size=4096'
  NEXT_TELEMETRY_DISABLED: 1
  HUSKY: 0 # Disable husky in CI
  CI: true

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: üîç Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type check
        run: npm run type-check

  # Job 2: Unit and Integration Tests
  unit-integration-tests:
    name: üß™ Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-group: [unit, integration]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests with coverage
        run: |
          if [ "${{ matrix.test-group }}" = "unit" ]; then
            npm test -- --coverage --testPathPattern="__tests__/(components|hooks|lib|utils)" --passWithNoTests
          else
            npm test -- --coverage --testPathPattern="__tests__/integration" --passWithNoTests
          fi
        env:
          CI: true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: ${{ matrix.test-group }}
          name: ${{ matrix.test-group }}-coverage
          fail_ci_if_error: false
          
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage/
          retention-days: 7

  # Job 3: Critical Features Test
  critical-tests:
    name: üõ°Ô∏è Critical Features Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint-and-typecheck]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run critical features test
        run: npm run test:critical
        
      - name: Notify on critical test failure
        if: failure()
        run: |
          echo "üö® Critical tests failed! This indicates a potential security issue." >> $GITHUB_STEP_SUMMARY
          echo "Please check the protected authentication files." >> $GITHUB_STEP_SUMMARY

  # Job 4: E2E Tests with Playwright
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint-and-typecheck]
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Build application
        run: npm run build
        
      - name: Start application
        run: npm start &
        env:
          NODE_ENV: test
          
      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health 2>/dev/null; do sleep 2; done' || {
            echo "Application failed to start within 60 seconds"
            exit 1
          }
          
      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7
          
      - name: Upload test traces
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-traces-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

  # Job 5: Coverage Analysis and Enforcement
  coverage-check:
    name: üìä Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-integration-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download unit coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-unit
          path: coverage-unit/
          
      - name: Download integration coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-integration
          path: coverage-integration/
          
      - name: Merge coverage reports
        run: |
          npx nyc merge coverage-unit coverage-integration/merged-coverage.json
          npx nyc report --reporter=lcov --reporter=text-summary --temp-dir=coverage-integration
          
      - name: Check coverage thresholds
        run: |
          COVERAGE=$(grep -o 'Lines.*: [0-9.]*%' coverage-integration/coverage.txt | grep -o '[0-9.]*' | head -1)
          echo "Current coverage: ${COVERAGE}%"
          
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below minimum threshold of 70%"
            echo "## Coverage Check Failed ‚ùå" >> $GITHUB_STEP_SUMMARY
            echo "Current coverage: **${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
            echo "Required minimum: **70%**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets minimum threshold"
            echo "## Coverage Check Passed ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "Current coverage: **${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage-integration/coverage.txt', 'utf8');
            const coverageMatch = coverage.match(/Lines.*: ([0-9.]+)%/);
            const coveragePercent = coverageMatch ? coverageMatch[1] : 'Unknown';
            
            const body = `## üìä Code Coverage Report
            
            **Current Coverage:** ${coveragePercent}%
            **Minimum Required:** 70%
            **Status:** ${parseFloat(coveragePercent) >= 70 ? '‚úÖ Passed' : '‚ùå Failed'}
            
            <details>
            <summary>View detailed coverage report</summary>
            
            \`\`\`
            ${coverage}
            \`\`\`
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Job 6: Advanced Build Verification with Performance Monitoring
  build-verification:
    name: üèóÔ∏è Build Verification
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    timeout-minutes: 15
    
    strategy:
      matrix:
        build-mode: [production, fast]
        include:
          - build-mode: production
            build-flags: "--ci"
            cache-key: "prod"
            artifact-name: "build-artifacts"
          - build-mode: fast
            build-flags: "--ci --fast"
            cache-key: "fast"
            artifact-name: "build-artifacts-fast"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup build dependencies
        run: sudo apt-get update && sudo apt-get install -y bc
          
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ matrix.cache-key }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ matrix.cache-key }}-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-${{ matrix.cache-key }}-
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false
      
      - name: Create build logs directory
        run: mkdir -p .build-logs
        
      - name: Run Advanced Build Verification Script
        run: ./scripts/verify-build.sh ${{ matrix.build-flags }}
        env:
          NODE_ENV: production
          NODE_OPTIONS: '--max-old-space-size=4096'
      
      - name: Extract Build Metrics and Create Summary
        if: always()
        run: |
          # Extract metrics from the most recent log file
          LOG_FILE=$(ls -t .build-logs/build-verification-*.log | head -1)
          if [ -f "$LOG_FILE" ]; then
            echo "BUILD_LOG_FILE=$LOG_FILE" >> $GITHUB_ENV
            
            # Extract key metrics using grep patterns from the script
            BUILD_DURATION=$(grep "BUILD_DURATION=" "$LOG_FILE" | cut -d= -f2 2>/dev/null || echo "unknown")
            BUILD_STATUS=$(grep "BUILD_STATUS=" "$LOG_FILE" | cut -d= -f2 2>/dev/null || echo "unknown")
            BUILD_SIZE=$(grep "BUILD_SIZE=" "$LOG_FILE" | cut -d= -f2 2>/dev/null || echo "unknown")
            WARNING_COUNT=$(grep "WARNING_COUNT=" "$LOG_FILE" | cut -d= -f2 2>/dev/null || echo "0")
            
            # Fallback extraction from log content if CI exports not found
            if [ "$BUILD_DURATION" = "unknown" ]; then
              BUILD_DURATION=$(grep -o "Build duration: [0-9.]*s" "$LOG_FILE" | grep -o "[0-9.]*" | head -1 || echo "unknown")
            fi
            if [ "$BUILD_SIZE" = "unknown" ]; then
              BUILD_SIZE=$(grep -o "Build size: [0-9.]*[MGK]" "$LOG_FILE" | head -1 || echo "unknown")
            fi
            if [ "$WARNING_COUNT" = "0" ]; then
              WARNING_COUNT=$(grep -c "Warning:" "$LOG_FILE" 2>/dev/null || echo "0")
            fi
            
            # Set environment variables for subsequent steps
            echo "BUILD_DURATION=$BUILD_DURATION" >> $GITHUB_ENV
            echo "BUILD_STATUS=$BUILD_STATUS" >> $GITHUB_ENV
            echo "BUILD_SIZE=$BUILD_SIZE" >> $GITHUB_ENV
            echo "WARNING_COUNT=$WARNING_COUNT" >> $GITHUB_ENV
            
            # Create detailed summary
            echo "## üèóÔ∏è Build Verification Results (${{ matrix.build-mode }} mode)" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Build Status | $BUILD_STATUS | $([ "$BUILD_STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå") |" >> $GITHUB_STEP_SUMMARY
            echo "| Duration | ${BUILD_DURATION}s | $([ "$BUILD_DURATION" != "unknown" ] && ([ $(echo "$BUILD_DURATION <= 30" | bc -l 2>/dev/null || echo 0) -eq 1 ] && echo "üü¢" || ([ $(echo "$BUILD_DURATION <= 45" | bc -l 2>/dev/null || echo 0) -eq 1 ] && echo "üü°" || echo "üî¥")) || echo "‚ÑπÔ∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "| Size | $BUILD_SIZE | ‚ÑπÔ∏è |" >> $GITHUB_STEP_SUMMARY
            echo "| Warnings | $WARNING_COUNT | $([ "$WARNING_COUNT" -eq 0 ] && echo "‚úÖ" || echo "‚ö†Ô∏è") |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Performance Target**: ‚ö° Sub-30s builds | üéØ <45s acceptable" >> $GITHUB_STEP_SUMMARY
            
            if [ "$WARNING_COUNT" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ö†Ô∏è **Action Required**: $WARNING_COUNT build warning(s) detected" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "$BUILD_DURATION" != "unknown" ] && [ $(echo "$BUILD_DURATION > 45" | bc -l 2>/dev/null || echo 0) -eq 1 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üî¥ **Performance Issue**: Build time exceeds 45s threshold" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå No build log file found" >> $GITHUB_STEP_SUMMARY
            echo "BUILD_STATUS=failed" >> $GITHUB_ENV
          fi
      
      - name: Performance Regression Check
        if: matrix.build-mode == 'production' && github.event_name == 'pull_request'
        run: |
          if [ "$BUILD_DURATION" != "unknown" ]; then
            if [ $(echo "$BUILD_DURATION > 45" | bc -l) -eq 1 ]; then
              echo "::warning::Build time ($BUILD_DURATION s) exceeds performance threshold (45s)"
              echo "::warning::Consider optimizing build performance or investigating regression"
            elif [ $(echo "$BUILD_DURATION > 60" | bc -l) -eq 1 ]; then
              echo "::error::Build time ($BUILD_DURATION s) critically exceeds threshold (60s)"
              exit 1
            fi
          fi
      
      - name: Upload Comprehensive Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            .build-logs/
            .next/BUILD_ID
            .next/build-manifest.json
            .next/static/chunks/
            !.next/cache/
          retention-days: 3
      
      - name: Comment PR with Detailed Build Results
        if: github.event_name == 'pull_request' && matrix.build-mode == 'production'
        uses: actions/github-script@v7
        with:
          script: |
            const buildDuration = process.env.BUILD_DURATION;
            const buildStatus = process.env.BUILD_STATUS;
            const buildSize = process.env.BUILD_SIZE;
            const warningCount = process.env.WARNING_COUNT;
            
            const getPerformanceEmoji = (duration) => {
              if (duration === "unknown") return "‚ÑπÔ∏è";
              const time = parseFloat(duration);
              if (time <= 30) return "üü¢";
              if (time <= 45) return "üü°";
              return "üî¥";
            };
            
            const getPerformanceText = (duration) => {
              if (duration === "unknown") return "Unknown";
              const time = parseFloat(duration);
              if (time <= 30) return "Excellent";
              if (time <= 45) return "Acceptable";
              return "Needs Optimization";
            };
            
            const body = `## üèóÔ∏è Advanced Build Verification Results
            
            | Metric | Value | Performance | Status |
            |--------|--------|-------------|--------|
            | Build Status | ${buildStatus} | - | ${buildStatus === 'success' ? '‚úÖ' : '‚ùå'} |
            | Build Time | ${buildDuration}s | ${getPerformanceText(buildDuration)} | ${getPerformanceEmoji(buildDuration)} |
            | Build Size | ${buildSize} | - | ‚ÑπÔ∏è |
            | Build Warnings | ${warningCount} | - | ${parseInt(warningCount) === 0 ? '‚úÖ' : '‚ö†Ô∏è'} |
            
            **Performance Targets**: 
            - üü¢ **Excellent**: ‚â§30s (Target)
            - üü° **Acceptable**: ‚â§45s 
            - üî¥ **Critical**: >45s
            
            **Script Features Used**:
            - ‚úÖ Comprehensive TypeScript type checking
            - ‚úÖ ESLint quality verification (0 warnings enforced)
            - ‚úÖ Production build with timeout protection
            - ‚úÖ Performance monitoring & trend analysis
            - ‚úÖ Build artifact validation
            - ‚úÖ Automated failure pattern detection
            
            ${parseInt(warningCount) > 0 ? `
            ‚ö†Ô∏è **Action Required**: ${warningCount} build warning(s) detected
            - Review build output in the workflow logs
            - Address warnings before merging to maintain code quality
            ` : ''}
            
            ${parseFloat(buildDuration) > 45 ? `
            üî¥ **Performance Issue Detected**
            - Build time (${buildDuration}s) exceeds acceptable threshold
            - Consider code splitting, dependency optimization, or build configuration review
            - Check for large imports or inefficient bundling
            ` : ''}
            
            <details>
            <summary>üìä Build Performance History</summary>
            
            This build verification uses the project's advanced \`scripts/verify-build.sh\` which includes:
            - Performance trend analysis across last 10 builds
            - Automated build timeout protection (60s)
            - Memory usage optimization
            - Comprehensive error pattern detection
            - Zero-warning enforcement for production builds
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Job 7: Security Scan
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --production
          
      - name: Check for critical vulnerabilities
        run: |
          CRITICAL=$(npm audit --json --audit-level=critical --production | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(npm audit --json --audit-level=high --production | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found: $CRITICAL"
            echo "## Security Scan Failed ‚ùå" >> $GITHUB_STEP_SUMMARY
            echo "**Critical vulnerabilities:** $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "**High vulnerabilities:** $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "Please run \`npm audit fix\` to resolve these issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Job 8: Performance Budget Check
  performance-check:
    name: ‚ö° Performance Budget
    runs-on: ubuntu-latest
    needs: [build-verification]
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download production build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./
          
      - name: Analyze bundle size
        run: |
          # Check JavaScript bundle sizes
          TOTAL_JS_SIZE=$(find .next/static/chunks -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
          TOTAL_JS_MB=$(echo "scale=2; $TOTAL_JS_SIZE / 1024 / 1024" | bc)
          
          echo "Total JavaScript bundle size: ${TOTAL_JS_MB} MB"
          
          # Budget: 2MB for total JS
          if (( $(echo "$TOTAL_JS_MB > 2" | bc -l) )); then
            echo "‚ùå JavaScript bundle size ${TOTAL_JS_MB}MB exceeds 2MB budget"
            echo "## Performance Budget Failed ‚ùå" >> $GITHUB_STEP_SUMMARY
            echo "**JavaScript bundle size:** ${TOTAL_JS_MB}MB" >> $GITHUB_STEP_SUMMARY
            echo "**Budget:** 2MB" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "‚úÖ JavaScript bundle size within budget"
            echo "## Performance Budget Passed ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "**JavaScript bundle size:** ${TOTAL_JS_MB}MB" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 9: Deployment Readiness Check
  deployment-readiness:
    name: üöÄ Deployment Readiness
    runs-on: ubuntu-latest
    needs: [critical-tests, unit-integration-tests, e2e-tests, coverage-check, build-verification, security-scan, performance-check]
    if: always()
    
    steps:
      - name: Check all job statuses
        run: |
          echo "Job Status Summary:"
          echo "Critical Tests: ${{ needs.critical-tests.result }}"
          echo "Unit/Integration: ${{ needs.unit-integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Coverage Check: ${{ needs.coverage-check.result }}"
          echo "Advanced Build Verification: ${{ needs.build-verification.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Performance Check: ${{ needs.performance-check.result }}"
          
          # Enhanced deployment readiness summary
          echo "## üöÄ Enhanced CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Build Verification Enhancements" >> $GITHUB_STEP_SUMMARY
          echo "- **Advanced Build Script**: Leverages \`scripts/verify-build.sh\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Monitoring**: Sub-30s target, 45s threshold" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Gates**: Zero-warning enforcement" >> $GITHUB_STEP_SUMMARY
          echo "- **Matrix Strategy**: Production + Fast build modes" >> $GITHUB_STEP_SUMMARY
          echo "- **Caching**: Intelligent Next.js build caching" >> $GITHUB_STEP_SUMMARY
          echo "- **Metrics**: Comprehensive build analytics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if any critical jobs failed
          if [[ "${{ needs.critical-tests.result }}" == "failure" || 
                "${{ needs.coverage-check.result }}" == "failure" || 
                "${{ needs.build-verification.result }}" == "failure" || 
                "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "‚ùå Deployment BLOCKED - Critical issues found"
            echo "## üö´ Deployment Blocked" >> $GITHUB_STEP_SUMMARY
            echo "Critical issues were found that prevent safe deployment:" >> $GITHUB_STEP_SUMMARY
            echo "- Build verification includes comprehensive quality checks" >> $GITHUB_STEP_SUMMARY
            echo "- Advanced build script enforces zero-error policy" >> $GITHUB_STEP_SUMMARY
            echo "- Performance thresholds must be met for deployment" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [[ "${{ needs.unit-integration-tests.result }}" == "failure" || 
                  "${{ needs.e2e-tests.result }}" == "failure" || 
                  "${{ needs.performance-check.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  Deployment CAUTIONED - Non-critical issues found"
            echo "## ‚ö†Ô∏è Deployment Cautioned" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed but deployment is not blocked:" >> $GITHUB_STEP_SUMMARY
            echo "- Advanced build verification passed critical checks" >> $GITHUB_STEP_SUMMARY
            echo "- Please review and fix issues before production deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ Deployment READY - All checks passed"
            echo "## ‚úÖ Deployment Ready" >> $GITHUB_STEP_SUMMARY
            echo "All quality gates passed with enhanced verification:" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Advanced build verification with performance monitoring" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Zero-warning enforcement policy met" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Comprehensive quality and security checks" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Safe to deploy with confidence!" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 10: Test Result Notification
  notify-results:
    name: üì¢ Notify Results
    runs-on: ubuntu-latest
    needs: [deployment-readiness]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Create test summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const jobResults = {
              'Critical Tests': '${{ needs.critical-tests.result }}',
              'Unit/Integration Tests': '${{ needs.unit-integration-tests.result }}',
              'E2E Tests': '${{ needs.e2e-tests.result }}',
              'Coverage Check': '${{ needs.coverage-check.result }}',
              'Build Verification': '${{ needs.build-verification.result }}',
              'Security Scan': '${{ needs.security-scan.result }}',
              'Performance Check': '${{ needs.performance-check.result }}',
              'Deployment Readiness': '${{ needs.deployment-readiness.result }}'
            };
            
            const getEmoji = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ö™';
              }
            };
            
            let body = `## üß™ CI/CD Pipeline Results\n\n`;
            body += `| Job | Status | Result |\n`;
            body += `|-----|--------|--------|\n`;
            
            for (const [job, status] of Object.entries(jobResults)) {
              body += `| ${job} | ${getEmoji(status)} | ${status} |\n`;
            }
            
            body += `\n---\n`;
            body += `**Workflow:** \`${context.workflow}\`\n`;
            body += `**Commit:** ${context.sha.substring(0, 7)}\n`;
            body += `**Branch:** ${context.ref.replace('refs/heads/', '')}\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });