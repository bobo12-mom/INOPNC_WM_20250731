const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function checkDailyReportsData() {
  console.log('üìä ÏûëÏóÖÏùºÏßÄ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌòÑÌô© ÌôïÏù∏\n');
  
  try {
    // Í¥ÄÎ¶¨ÏûêÎ°ú Î°úÍ∑∏Ïù∏
    const { data: authData } = await supabase.auth.signInWithPassword({
      email: 'admin@inopnc.com',
      password: 'password123'
    });
    
    console.log('‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ: admin@inopnc.com');
    
    // Ï†ÑÏ≤¥ ÏûëÏóÖÏùºÏßÄ Ïàò
    const { count: totalCount } = await supabase
      .from('daily_reports')
      .select('*', { count: 'exact', head: true });
    
    console.log('üìù Ï†ÑÏ≤¥ ÏûëÏóÖÏùºÏßÄ Ïàò:', totalCount || 0, 'Í±¥\n');
    
    // ÏµúÍ∑º 10Í∞ú ÏûëÏóÖÏùºÏßÄ Ï°∞Ìöå
    const { data: recentReports, error } = await supabase
      .from('daily_reports')
      .select('id, work_date, member_name, process_type, status, total_workers, sites(name), created_by')
      .order('work_date', { ascending: false })
      .limit(10);
    
    if (error) {
      console.error('‚ùå Ïò§Î•ò:', error.message);
      return;
    }
    
    console.log('üìã ÏµúÍ∑º ÏûëÏóÖÏùºÏßÄ 10Í±¥:');
    console.log('='.repeat(70));
    
    if (recentReports && recentReports.length > 0) {
      recentReports.forEach((report, index) => {
        console.log(`${index + 1}. ${report.work_date} - ${report.process_type}`);
        console.log(`   üë∑ ÏûëÏóÖÏûê: ${report.member_name} (${report.total_workers || 0}Î™Ö)`);
        console.log(`   üèóÔ∏è ÌòÑÏû•: ${report.sites?.name || 'ÌòÑÏû• Ï†ïÎ≥¥ ÏóÜÏùå'}`);
        console.log(`   üìã ÏÉÅÌÉú: ${report.status}`);
        console.log(`   ‚úèÔ∏è ÏûëÏÑ±Ïûê ID: ${report.created_by || 'Ï†ïÎ≥¥ ÏóÜÏùå'}`);
        console.log('');
      });
    } else {
      console.log('‚ö†Ô∏è ÏûëÏóÖÏùºÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.');
    }
    
    // ÏÉÅÌÉúÎ≥Ñ ÌÜµÍ≥Ñ
    const { data: statusStats, error: statsError } = await supabase
      .from('daily_reports')
      .select('status')
      .order('status');
    
    if (statsError) {
      console.error('ÌÜµÍ≥Ñ Ïò§Î•ò:', statsError.message);
    } else if (statusStats) {
      const statusCounts = {};
      statusStats.forEach(report => {
        statusCounts[report.status] = (statusCounts[report.status] || 0) + 1;
      });
      
      console.log('üìä ÏÉÅÌÉúÎ≥Ñ ÌÜµÍ≥Ñ:');
      console.log('='.repeat(30));
      Object.entries(statusCounts).forEach(([status, count]) => {
        const statusName = {
          'draft': 'ÏûÑÏãúÏ†ÄÏû•',
          'submitted': 'Ï†úÏ∂úÏôÑÎ£å', 
          'approved': 'ÏäπÏù∏ÏôÑÎ£å'
        }[status] || status;
        console.log(`   ${statusName}: ${count}Í±¥`);
      });
    }
    
    // ÏµúÍ∑º 7ÏùºÍ∞Ñ ÌÜµÍ≥Ñ
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    const sevenDaysAgoStr = sevenDaysAgo.toISOString().split('T')[0];
    
    const { count: recentCount } = await supabase
      .from('daily_reports')
      .select('*', { count: 'exact', head: true })
      .gte('work_date', sevenDaysAgoStr);
    
    console.log(`\nüìÖ ÏµúÍ∑º 7ÏùºÍ∞Ñ ÏûëÏóÖÏùºÏßÄ: ${recentCount || 0}Í±¥`);
    
    // ÌòÑÏû•Î≥Ñ ÌÜµÍ≥Ñ
    const { data: siteStats, error: siteStatsError } = await supabase
      .from('daily_reports')
      .select('site_id, sites(name)')
      .order('site_id');
    
    if (siteStatsError) {
      console.error('ÌòÑÏû• ÌÜµÍ≥Ñ Ïò§Î•ò:', siteStatsError.message);
    } else if (siteStats) {
      const siteCounts = {};
      siteStats.forEach(report => {
        const siteName = report.sites?.name || 'ÌòÑÏû• Ï†ïÎ≥¥ ÏóÜÏùå';
        siteCounts[siteName] = (siteCounts[siteName] || 0) + 1;
      });
      
      console.log('\nüèóÔ∏è ÌòÑÏû•Î≥Ñ ÌÜµÍ≥Ñ:');
      console.log('='.repeat(30));
      Object.entries(siteCounts).forEach(([siteName, count]) => {
        console.log(`   ${siteName}: ${count}Í±¥`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Ï†ÑÏ≤¥ Ïò§Î•ò:', error.message);
  }
}

checkDailyReportsData();