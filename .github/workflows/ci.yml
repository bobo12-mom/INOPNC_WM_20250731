name: CI/CD Pipeline - Testing & Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  HUSKY: 0 # Disable husky in CI

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: üîç Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type check
        run: npm run type-check

  # Job 2: Unit and Integration Tests
  unit-integration-tests:
    name: üß™ Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-group: [unit, integration]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests with coverage
        run: |
          if [ "${{ matrix.test-group }}" = "unit" ]; then
            npm test -- --coverage --testPathPattern="__tests__/(components|hooks|lib|utils)" --passWithNoTests
          else
            npm test -- --coverage --testPathPattern="__tests__/integration" --passWithNoTests
          fi
        env:
          CI: true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: ${{ matrix.test-group }}
          name: ${{ matrix.test-group }}-coverage
          fail_ci_if_error: false
          
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage/
          retention-days: 7

  # Job 3: Critical Features Test
  critical-tests:
    name: üõ°Ô∏è Critical Features Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint-and-typecheck]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run critical features test
        run: npm run test:critical
        
      - name: Notify on critical test failure
        if: failure()
        run: |
          echo "üö® Critical tests failed! This indicates a potential security issue." >> $GITHUB_STEP_SUMMARY
          echo "Please check the protected authentication files." >> $GITHUB_STEP_SUMMARY

  # Job 4: E2E Tests with Playwright
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint-and-typecheck]
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Build application
        run: npm run build
        
      - name: Start application
        run: npm start &
        env:
          NODE_ENV: test
          
      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health 2>/dev/null; do sleep 2; done' || {
            echo "Application failed to start within 60 seconds"
            exit 1
          }
          
      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7
          
      - name: Upload test traces
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-traces-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

  # Job 5: Coverage Analysis and Enforcement
  coverage-check:
    name: üìä Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-integration-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download unit coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-unit
          path: coverage-unit/
          
      - name: Download integration coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-integration
          path: coverage-integration/
          
      - name: Merge coverage reports
        run: |
          npx nyc merge coverage-unit coverage-integration/merged-coverage.json
          npx nyc report --reporter=lcov --reporter=text-summary --temp-dir=coverage-integration
          
      - name: Check coverage thresholds
        run: |
          COVERAGE=$(grep -o 'Lines.*: [0-9.]*%' coverage-integration/coverage.txt | grep -o '[0-9.]*' | head -1)
          echo "Current coverage: ${COVERAGE}%"
          
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below minimum threshold of 70%"
            echo "## Coverage Check Failed ‚ùå" >> $GITHUB_STEP_SUMMARY
            echo "Current coverage: **${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
            echo "Required minimum: **70%**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets minimum threshold"
            echo "## Coverage Check Passed ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "Current coverage: **${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage-integration/coverage.txt', 'utf8');
            const coverageMatch = coverage.match(/Lines.*: ([0-9.]+)%/);
            const coveragePercent = coverageMatch ? coverageMatch[1] : 'Unknown';
            
            const body = `## üìä Code Coverage Report
            
            **Current Coverage:** ${coveragePercent}%
            **Minimum Required:** 70%
            **Status:** ${parseFloat(coveragePercent) >= 70 ? '‚úÖ Passed' : '‚ùå Failed'}
            
            <details>
            <summary>View detailed coverage report</summary>
            
            \`\`\`
            ${coverage}
            \`\`\`
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Job 6: Build Verification
  build-verification:
    name: üèóÔ∏è Build Verification
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Check build artifacts
        run: |
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed - .next directory not found"
            exit 1
          fi
          echo "‚úÖ Build successful - artifacts generated"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            !.next/cache/
          retention-days: 1

  # Job 7: Security Scan
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --production
          
      - name: Check for critical vulnerabilities
        run: |
          CRITICAL=$(npm audit --json --audit-level=critical --production | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(npm audit --json --audit-level=high --production | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found: $CRITICAL"
            echo "## Security Scan Failed ‚ùå" >> $GITHUB_STEP_SUMMARY
            echo "**Critical vulnerabilities:** $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "**High vulnerabilities:** $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "Please run \`npm audit fix\` to resolve these issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Job 8: Performance Budget Check
  performance-check:
    name: ‚ö° Performance Budget
    runs-on: ubuntu-latest
    needs: [build-verification]
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          
      - name: Analyze bundle size
        run: |
          # Check JavaScript bundle sizes
          TOTAL_JS_SIZE=$(find .next/static/chunks -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
          TOTAL_JS_MB=$(echo "scale=2; $TOTAL_JS_SIZE / 1024 / 1024" | bc)
          
          echo "Total JavaScript bundle size: ${TOTAL_JS_MB} MB"
          
          # Budget: 2MB for total JS
          if (( $(echo "$TOTAL_JS_MB > 2" | bc -l) )); then
            echo "‚ùå JavaScript bundle size ${TOTAL_JS_MB}MB exceeds 2MB budget"
            echo "## Performance Budget Failed ‚ùå" >> $GITHUB_STEP_SUMMARY
            echo "**JavaScript bundle size:** ${TOTAL_JS_MB}MB" >> $GITHUB_STEP_SUMMARY
            echo "**Budget:** 2MB" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "‚úÖ JavaScript bundle size within budget"
            echo "## Performance Budget Passed ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "**JavaScript bundle size:** ${TOTAL_JS_MB}MB" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 9: Deployment Readiness Check
  deployment-readiness:
    name: üöÄ Deployment Readiness
    runs-on: ubuntu-latest
    needs: [critical-tests, unit-integration-tests, e2e-tests, coverage-check, build-verification, security-scan, performance-check]
    if: always()
    
    steps:
      - name: Check all job statuses
        run: |
          echo "Job Status Summary:"
          echo "Critical Tests: ${{ needs.critical-tests.result }}"
          echo "Unit/Integration: ${{ needs.unit-integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Coverage Check: ${{ needs.coverage-check.result }}"
          echo "Build Verification: ${{ needs.build-verification.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Performance Check: ${{ needs.performance-check.result }}"
          
          # Check if any critical jobs failed
          if [[ "${{ needs.critical-tests.result }}" == "failure" || 
                "${{ needs.coverage-check.result }}" == "failure" || 
                "${{ needs.build-verification.result }}" == "failure" || 
                "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "‚ùå Deployment BLOCKED - Critical issues found"
            echo "## üö´ Deployment Blocked" >> $GITHUB_STEP_SUMMARY
            echo "Critical issues were found that prevent safe deployment." >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [[ "${{ needs.unit-integration-tests.result }}" == "failure" || 
                  "${{ needs.e2e-tests.result }}" == "failure" || 
                  "${{ needs.performance-check.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  Deployment CAUTIONED - Non-critical issues found"
            echo "## ‚ö†Ô∏è Deployment Cautioned" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed but deployment is not blocked." >> $GITHUB_STEP_SUMMARY
            echo "Please review and fix issues before production deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ Deployment READY - All checks passed"
            echo "## ‚úÖ Deployment Ready" >> $GITHUB_STEP_SUMMARY
            echo "All quality gates passed. Safe to deploy!" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 10: Test Result Notification
  notify-results:
    name: üì¢ Notify Results
    runs-on: ubuntu-latest
    needs: [deployment-readiness]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Create test summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const jobResults = {
              'Critical Tests': '${{ needs.critical-tests.result }}',
              'Unit/Integration Tests': '${{ needs.unit-integration-tests.result }}',
              'E2E Tests': '${{ needs.e2e-tests.result }}',
              'Coverage Check': '${{ needs.coverage-check.result }}',
              'Build Verification': '${{ needs.build-verification.result }}',
              'Security Scan': '${{ needs.security-scan.result }}',
              'Performance Check': '${{ needs.performance-check.result }}',
              'Deployment Readiness': '${{ needs.deployment-readiness.result }}'
            };
            
            const getEmoji = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚èπÔ∏è';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ö™';
              }
            };
            
            let body = `## üß™ CI/CD Pipeline Results\n\n`;
            body += `| Job | Status | Result |\n`;
            body += `|-----|--------|--------|\n`;
            
            for (const [job, status] of Object.entries(jobResults)) {
              body += `| ${job} | ${getEmoji(status)} | ${status} |\n`;
            }
            
            body += `\n---\n`;
            body += `**Workflow:** \`${context.workflow}\`\n`;
            body += `**Commit:** ${context.sha.substring(0, 7)}\n`;
            body += `**Branch:** ${context.ref.replace('refs/heads/', '')}\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });